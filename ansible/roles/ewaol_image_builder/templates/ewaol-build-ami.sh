#!/bin/bash -i
# SPDX-FileCopyrightText: (c) 2025 Xronos Inc. Licensed to DENSO International America, Inc.
# SPDX-License-Identifier: BSD-3-Clause
# This file is generated by Ansible.

# This script builds an EWAOL AMI image from the SOAFEE Blueprint.
# It should be run as a user (not sudo) from the directory:
# {{ soafee_dir }}/ewaol-image

# Usage: ./ewaol-build-ami.sh [volume size in GB]
# If no volume size is provided, the default value of 64 is used.

set -e
set -o pipefail

image_size_gb=${1:-64}

# add kas (~/.local/bin) and bitbake (from Yocto layers) to path
PATH={{ ansible_env.HOME }}/.local/bin:{{ soafee_dir }}/ewaol-image/layers/poky/bitbake/bin/:${PATH}

function cleanup() {
    set +e
    echo "===> cleaning up"
    if [ -n "${s3_object}" ]; then
        echo "======> delete intermediary s3 object ${s3_object}"
        aws s3 rm "${s3_object}"
    fi
    echo "======> re-enable unprivileged user namespaces"
    sudo sysctl -w kernel.unprivileged_userns_clone=1
    echo "===> ewaol-build-ami finished with exit code ${rc}"
}

trap 'rc=$?; cleanup; exit ${rc}' EXIT

# bitbake is not compatible with user namespaces; disable them here
echo disable unprivileged user namespaces
sudo sysctl -w kernel.unprivileged_userns_clone=0

# Kas build os image
echo "===> build yocto project"
kas build --provenance mode=max kas/machines/ewaol-graviton2-ami.yaml

# create AMI
echo "===> create AMI"
(cd build \
    && ../layers/meta-aws/scripts/ec2-ami/create-ec2-ami.sh \
        {{ ami_s3_bucket}} \
        ${image_size_gb} \
        soafee-ewaol-{{ ewaol_distro_codename }} \
        aws-ec2-arm64 \
    | tee ami-create.log )

# get AMI ID from build output
ami_id=$(grep '^AMI ID: ' build/ami-create.log | sed 's/^AMI ID: //')
echo ${ami_id} > build/ami-id.log

# tag the AMI
echo "===> tag AMI ${ami_id}"
aws ec2 create-tags --resources ${ami_id} \
    --tags  Key=Name,Value=soafee-blueprint-ewaol-{{ ewaol_distro_codename }} \
            Key=environment,Value=development \
            Key=deployment,Value={{ deployment }} \
            Key=managed,Value=true \
            Key=create-script,Value=meta-aws \
            Key=distro,Value=ewaol \
            Key=distro_codename,Value={{ ewaol_distro_codename }} \
            Key=target_arch,Value=arm64 \
            Key=configuration,Value=xronos \
            Key=sources-path,Value=/usr/src/yocto-sources/ \
            Key=licenses-path,Value=/usr/share/common-licenses/

# get the intermediary s3 bucket item from build output
s3_object=$(grep -Eo 's3://[^ ]+\.rootfs-.*\.wic\.vhd' build/ami-create.log | head -n 1)

echo "===> cleaning deploy directory"
find build/tmp/deploy/ -type f ! -name '*.wic' ! -name '*.wic.bmap' ! -name '*.wic.vhdx' ! -name '*.tar.bz2' ! -name '*.manifest' -delete

# snapshot has been created
echo "===> successfully created AMI ${ami_id}"
